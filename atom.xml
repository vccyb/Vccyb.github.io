<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://vccyb.github.io</id>
    <title>Vccyb</title>
    <updated>2020-08-05T11:09:50.019Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://vccyb.github.io"/>
    <link rel="self" href="https://vccyb.github.io/atom.xml"/>
    <subtitle>今日事，今日毕</subtitle>
    <logo>https://vccyb.github.io/images/avatar.png</logo>
    <icon>https://vccyb.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Vccyb</rights>
    <entry>
        <title type="html"><![CDATA[练字Week01（2020-7-27~2020-8-2）]]></title>
        <id>https://vccyb.github.io/post/lian-zi-week012020-7-27~2020-8-2/</id>
        <link href="https://vccyb.github.io/post/lian-zi-week012020-7-27~2020-8-2/">
        </link>
        <updated>2020-08-02T14:34:49.000Z</updated>
        <content type="html"><![CDATA[<p>第一周：练习的是田英章的楷书技法<br>
2020-7-27~2020-8-2</p>
<p><img src="https://s1.ax1x.com/2020/08/03/aNyTG6.jpg" alt="aNyTG6.jpg" loading="lazy"><br>
<img src="https://s1.ax1x.com/2020/08/03/aNyoPx.jpg" alt="aNyoPx.jpg" loading="lazy"><br>
<img src="https://s1.ax1x.com/2020/08/03/aNy5I1.jpg" alt="aNy5I1.jpg" loading="lazy"><br>
<img src="https://s1.ax1x.com/2020/08/03/aNy4aR.jpg" alt="aNy4aR.jpg" loading="lazy"><br>
<img src="https://s1.ax1x.com/2020/08/03/aNyhZ9.jpg" alt="aNyhZ9.jpg" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[LeetCode_Week01(下)]]></title>
        <id>https://vccyb.github.io/post/leetcode_week01xia/</id>
        <link href="https://vccyb.github.io/post/leetcode_week01xia/">
        </link>
        <updated>2020-08-02T05:08:58.000Z</updated>
        <content type="html"><![CDATA[<h2 id="leetcode-6-z字形变换">LeetCode 6 Z字形变换</h2>
<blockquote>
<p>找规律的题目，多在草稿纸上试一试</p>
</blockquote>
<pre><code class="language-java">class Solution {
    public String convert(String s, int n) {
        if(n==1) return s;
        StringBuilder res = new StringBuilder();
        for(int i=0;i&lt;n;i++){
            if(i==0||i==n-1){
                for(int j=i;j&lt;s.length();j+=2*n-2){
                    res.append(s.charAt(j));
                }
            }else{
                for(int a=i,b=2*n-2-a;a&lt;s.length() || b&lt;s.length(); a+=2*n-2,b+=2*n-2){
                    if(a&lt;s.length()) res.append(s.charAt(a));
                    if(b&lt;s.length()) res.append(s.charAt(b));
                }
            }

        }
        return res.toString();
    }
}
</code></pre>
<p>注意：除了第一行和导数第一行，可以看为两个等差数组 2*n-2</p>
<h2 id="leetcode-7-整数反转">LeetCode 7 整数反转</h2>
<pre><code class="language-java">class Solution {
    public int reverse(int x) {
        long res = 0;
        while(x!=0){
            res = res*10 + x%10;
            x/=10;
        }
        if(res &gt; Integer.MAX_VALUE) return 0;
        if(res &lt; Integer.MIN_VALUE) return 0;
        return (int)res;
    }
}


//不适用long
class Solution {
    public int reverse(int x) {
        int res = 0;
        while(x!=0){
            if(res &gt; 0 &amp;&amp; res &gt; (Integer.MAX_VALUE - x%10)/10) return 0;
            if(res &lt; 0 &amp;&amp; res &lt; (Integer.MIN_VALUE - x%10)/10) return 0;
            res = res*10 + x%10;
            x/=10;
        }

        return (int)res;
    }
}
</code></pre>
<h2 id="leetcode-8-字符串转整数">LeetCode 8 字符串转整数</h2>
<pre><code class="language-java">class Solution {
    public int myAtoi(String str) {
        int n = str.length();
        int k = 0;
        while(k &lt; n &amp;&amp; str.charAt(k)==' ') k++;
        if(k==n) return 0;

        int op = 1;
        if(str.charAt(k)=='-'){
            op = -1;
            k ++;
        }else if(str.charAt(k) == '+') k++;

        long res = 0;
        while(k&lt;n &amp;&amp; str.charAt(k)&gt;='0' &amp;&amp; str.charAt(k)&lt;='9'){
            res = res * 10 + str.charAt(k) - '0';
            k ++;

            if(res &gt; Integer.MAX_VALUE) break;
        }

        res = res * op;
        if(res &gt; Integer.MAX_VALUE) res = Integer.MAX_VALUE;
        if(res &lt; Integer.MIN_VALUE) res = Integer.MIN_VALUE;

        return (int)res;
    }
}
</code></pre>
<h2 id="leetcode-9-回文数">LeetCode 9 回文数</h2>
<pre><code class="language-java">//不适用String去做
class Solution {
    public boolean isPalindrome(int x) {
        if(x&lt;0) return false;
        int res = 0;
        int x_back = x;
        while(x!=0){
            res = res*10 + x%10;
            x/=10;
        }
        return res==x_back;
    }
}
</code></pre>
<h2 id="leetcode-10-正则表达式匹配">LeetCode 10 正则表达式匹配</h2>
<blockquote>
<p>dp 难题，先空着</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[LeetCode_Week01(上)]]></title>
        <id>https://vccyb.github.io/post/leetcode_week01/</id>
        <link href="https://vccyb.github.io/post/leetcode_week01/">
        </link>
        <updated>2020-08-01T08:27:32.000Z</updated>
        <content type="html"><![CDATA[<h2 id="leetcode-1-两数之和">LeetCode 1 两数之和</h2>
<blockquote>
<p>要注意这个题是有个前提条件的，即每种输入只有一种答案</p>
</blockquote>
<pre><code class="language-java">class Solution {
    public int[] twoSum(int[] nums, int target) {
        //1. 特判
        if(nums == null || nums.length == 0){
            return new int[]{-1, -1};
        }
        //2. 利用Map特性，存储每个点的值和所对应的下标
        Map&lt;Integer, Integer&gt; map = new HashMap&lt;Integer, Integer&gt;();
        for(int i = 0; i&lt;nums.length; i++){
            if(map.containsKey(target - nums[i])){
                 //是否含有目标值，即target-nums[i]
                return new int[]{map.get(target - nums[i]), i}; //获取下标并返回
            }
            map.put(nums[i], i);
        }
        return new int[]{-1, -1};
    }
}
</code></pre>
<p>hashMap 插入，查询都是O(1),n重循环<br>
时间复杂度O(n)</p>
<h2 id="leetcode-2-两数相加">LeetCode 2 两数相加</h2>
<blockquote>
<p>这个题是模拟，有个小技巧就是虚拟头节点</p>
</blockquote>
<pre><code class="language-java">/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode dummy = new ListNode(0); //虚拟头节点
        ListNode cur = dummy;
        int t = 0;
        while(l1!=null || l2!= null){
            //l1 或者是 l2 没有循环完毕
            if(l1 != null){
                t += l1.val;
                l1 = l1.next;
            }

            if(l2 != null){
                t += l2.val;
                l2 = l2.next;
            }

            cur.next = new ListNode(t%10); //
            t/=10;

            cur = cur.next; 
        }
        if(t != 0) cur.next = new ListNode(t);
        return dummy.next;
    }
}
</code></pre>
<h2 id="leetcode-3-无重复字符的最长子串">LeetCode 3 无重复字符的最长子串</h2>
<blockquote>
<p>本质，双指针算法，使用的前提就是单调性</p>
</blockquote>
<pre><code class="language-java">class Solution {
    public int lengthOfLongestSubstring(String s) {
        Map&lt;Character, Integer&gt; map = new HashMap&lt;Character, Integer&gt;();
        int ans = 0;
        for(int i=0,j=0;i&lt;s.length();i++){
            map.put(s.charAt(i), map.getOrDefault(s.charAt(i),0)+1);
            //判断i位置的元素是否有重复
            while(map.get(s.charAt(i))&gt;1){
                map.put(s.charAt(j),map.get(s.charAt(j))-1);
                j++;
            }
            ans = Math.max(ans, i-j+1);
        }
        return ans;
    }
}
</code></pre>
<h2 id="leetcode-4-寻找两个正序数组中的中位数">LeetCode 4 寻找两个正序数组中的中位数</h2>
<blockquote>
<p>困难题！！！<br>
<strong>暴力基本解法</strong><br>
思路：开辟一个新的数组</p>
</blockquote>
<pre><code class="language-java">class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int[] nums;
        int m = nums1.length;
        int n = nums2.length;
        nums = new int[n+m];
        if(m==0){
            if(n%2==0){
                return (nums2[n/2 -1] + nums2[n/2]) / 2.0;
            }else{
                return nums2[n/2];
            }
        }

        if(n==0){
            if(m%2==0){
                return (nums1[m/2 -1] + nums1[m/2]) / 2.0;
            }else{
                return nums1[m/2];
            }
        }

        int count = 0;
        int i=0,j=0;
        while(count!=(m+n)){
            if(i==m){
                while(j!=n){
                    nums[count++] = nums2[j++];
                }
                break;
            }

            if(j==n){
                while(i!=m){
                    nums[count++] = nums1[i++];
                }
                break;
            }

            if(nums1[i]&lt;nums2[j]){
                nums[count++] = nums1[i++];
            }else{
                nums[count++] = nums2[j++];
            }
        }

        if(count%2==0){
            return (nums[count/2 - 1]+ nums[count/2]) / 2.0;
        }else{
            return nums[count/2];
        }

    }
}
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://gitee.com/vccyb/tuc/raw/master/LeetCode/Week01/01.png" alt="" loading="lazy"></figure>
<p>时间复杂度O(m+n) 还开辟了新的数组，不符合题目要求</p>
<p>递归做法<br>
思路转化为找第k小的数，每次可以省略一般2/k的数</p>
<pre><code class="language-java">class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int total = nums1.length + nums2.length;
        if(total % 2 == 0){
            int left  = f(nums1, 0, nums2, 0, total/2);
            int right = f(nums1, 0, nums2, 0, total/2 + 1);
            return (left+right) / 2.0;
        }else{
            return f(nums1, 0, nums2, 0, total/2+1);
        }
    }


    static int f(int[] nums1, int i, int[] nums2, int j, int k){
        if(nums1.length - i &gt; nums2.length - j) return f(nums2,j,nums1,i,k);

        if(nums1.length==i) return nums2[j+k-1]; //序列1用完了，直接返回
        if(k==1) return Math.min(nums1[i],nums2[j]); //最终k==1 了 比较一下返回
        int si = Math.min(nums1.length, i + k/2), sj = j + k- k/2;
        if(nums1[si-1] &gt; nums2[sj-1]){
            return f(nums1,i,nums2,sj,k-(sj-j));
        }else{
            return f(nums1,si,nums2,j,k-(si-i));
        }
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://gitee.com/vccyb/tuc/raw/master/LeetCode/Week01/02.png" alt="" loading="lazy"></figure>
<h2 id="leetcode-5-最长回文子串">LeetCode 5 最长回文子串</h2>
<blockquote>
<p>思路：1、枚举数组中的每个位置i，从当前位置开始向两边扩散，<br>
2、当回文子串是奇数时，从i开始往两边扩散，<br>
3、当回文子串是偶数时，从i，i + 1开始往两边扩散<br>
4、找到以i为中心的最长回文子串的长度，若存在回文子串比以前的长，则更新回文串的长度maxv，以及两端的位置l和r</p>
</blockquote>
<pre><code class="language-java">class Solution {
    public String longestPalindrome(String s) {
        if(s==null||&quot;&quot;.equals(s)) return s;
        String res = Character.toString(s.charAt(0));
        for(int i=0;i&lt;s.length();i++){
            //回文长是奇数
            int left = i-1, right = i+1;
            while(left&gt;=0 &amp;&amp; right &lt; s.length() &amp;&amp; s.charAt(left)==s.charAt(right)){
                if(right - left + 1&gt; res.length()){
                    res = s.substring(left, right+1);
                }
                left--;right++;
            }

            //偶数情况下
            left = i;right = i+1;
            while(left&gt;=0 &amp;&amp; right &lt; s.length() &amp;&amp; s.charAt(left)==s.charAt(right)){
                if(right - left + 1&gt; res.length()){
                    res = s.substring(left, right+1);
                }
                left--;right++;
            }
        }
        return res;
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[开始]]></title>
        <id>https://vccyb.github.io/post/kai-shi/</id>
        <link href="https://vccyb.github.io/post/kai-shi/">
        </link>
        <updated>2020-07-31T02:37:12.000Z</updated>
        <content type="html"><![CDATA[<p>不知何时起，在生活的点点滴滴中，有时总是有一股表达的欲望。</p>
<p>既然想表达，就希望能有一个自由的平台，思来想去，查阅了网上的各种资料，无论是个人建站，或者其他的那些博客平台也好，最终还是选择最简单的方式，简单意味着便捷高效，不用花费大量的时间在其他的技术方面，而可以专注的表达吧，简单也许就能让我坚持下去吧🤣</p>
<p>不管怎么说，我的个人小站就这样简简单单的开始了，gogogo</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://vccyb.github.io/post/hello-gridea/</id>
        <link href="https://vccyb.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>